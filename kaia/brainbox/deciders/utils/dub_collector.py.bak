#This decider was used to cut the alternative output of the TortoiseTTS into fragments.
#This functionality is not really used anymore, and this class is a single one that pulls torch into project.
#Therefore, until the functionality is needed again, it is removed from codebase, but kept as an example of how to do this thing.
#In case a need again arises in this, it should be refactored to run in an external environment with torch.
#Kaia should be kept torch-free on deployment.

import subprocess
from typing import *
from kaia.brainbox.core import IDecider
from copy import copy
import traceback
import torch
from uuid import uuid4
import torchaudio
from abc import ABC, abstractmethod
from kaia.infra import Loc
import os
from kaia.brainbox.media_library import MediaLibrary
from datetime import datetime
from kaia.infra import FileIO


class IDubCollectorProcessor(ABC):
    @abstractmethod
    def cut(self, file, start, length):
        pass

    @abstractmethod
    def postprocess(self,records: Iterable[MediaLibrary.Record], errors):
        pass

    def set_file_cache(self, file_cache):
        self.file_cache = file_cache


class FakeDubCollectorProcessor(IDubCollectorProcessor):
    def cut(self, file, start, length):
        js = FileIO.read_json(self.file_cache/file)
        js['text'] = js['text'][start:start + length]
        uid = f'{uuid4()}.json'
        FileIO.write_json(js, self.file_cache/uid)
        return uid

    def postprocess(self,records: Iterable[MediaLibrary.Record], errors):
        return MediaLibrary(tuple(records), errors)



class TortoiseTTSDubCollectorPostprocessor(IDubCollectorProcessor):
    def cut(self, file, start, length):
        data = torch.load(self.file_cache / file)
        start_alignment = data['alignment'][start]
        end_alignment = data['alignment'][start + length - 1]
        audio_clip = data['audio'][:, :, start_alignment:end_alignment]
        wav_file = str(uuid4()) + ".wav"
        torchaudio.save(self.file_cache / wav_file, audio_clip.squeeze(0).cpu(), 24000)
        return wav_file

    def compress_file(self, r: MediaLibrary.Record):
        if os.path.getsize(r.holder_location / r.filename) < 1000:
            return r
        target = r.filename.replace('.wav', '.ogg')
        result = subprocess.call([
            Loc.get_ffmpeg(),
            '-i',
            str(r.holder_location / r.filename),
            '-c:a',
            'libvorbis',
            '-b:a',
            '64k',
            str(r.holder_location / target)
        ])
        if result != 0:
            raise ValueError(f'Cannot encode file {r.filename}')
        return MediaLibrary.Record(
            target,
            r.holder_location,
            r.timestamp,
            r.job_id,
            r.tags
        )


    def postprocess(self,records, errors):
        records = tuple(self.compress_file(r) for r in records)
        library = MediaLibrary(records, errors)
        return library




class DubCollector(IDecider):
    def __init__(self, processor: Optional[IDubCollectorProcessor] = None):
        self.processor = processor if processor is not None else TortoiseTTSDubCollectorPostprocessor()

    def warmup(self, parameters: str):
        pass

    def cooldown(self, parameters: str):
        pass

    def __call__(self, spec: Dict[str, List], **kwargs):
        self.processor.set_file_cache(self.file_cache)
        errors = []
        records = []
        for id, desc in spec.items():
            if id not in kwargs:
                errors.append(f'Id {id} not in the list of jobs')
            result = kwargs[id]
            for cut_index, cut in enumerate(desc):
                for file_index, file in enumerate(result):
                    try:
                        cut_file = self.processor.cut(file, cut.start, cut.length)
                    except:
                        errors.append(f"Error when processing id {id}, cut_index {cut_index}, file_index {file_index}\n{traceback.format_exc()}")
                        continue

                    tags = {}
                    if cut.fragment.tags is not None:
                        tags = copy(cut.fragment.tags)

                    record = MediaLibrary.Record(
                        filename = cut_file,
                        holder_location = self.file_cache,
                        timestamp = datetime.now(),
                        job_id = id,
                        tags = tags
                    )
                    record.tags['option_index'] = file_index
                    records.append(record)


        library = self.processor.postprocess(records, errors)
        fname = f'{uuid4()}.zip'
        library.save(self.file_cache/fname)
        return fname











